## bro approach
def in_place_sep(nums):
    write_index = 0
    for i in range(len(nums)):
        if nums[i] % 2 == 1:
            continue
        else:
            break
    write_index = i
    for j in range(i + 1, len(nums)):
        if nums[j] % 2 == 0:
            continue
        elif nums[j] % 2 == 1:
            nums[write_index], nums[j] = nums[j], nums[write_index]
            write_index += 1
        print "iter " + str(j) + str(nums)
        
    print "\nanswer: " + str(nums)

def standard_approach(nums):
    # this does not guarantee relative order
    # that will be tackled the next time
    left, right = 0, len(nums) - 1

    while (left < right):
        while (nums[left] % 2 == 1):
            left += 1
        while (nums[right] % 2 == 0):
            right -= 1
        if (nums[left] % 2 == 0 and nums[right] %2 == 1):
            nums[left], nums[right] = nums[right], nums[left]
            left += 1
            right -= 1
        print "iter: ", nums
    print "\nFinal result: ", nums

# Good solution
# practice 15-20 min per day
# you will get familiar with range, for, while, and, etc.
# good job

## Vivek Approach
def separate_numbers(nums):
    variable = 0
    # range(4) = [0, 1, 2, 3]
    # len([0, 1, 2, 3]) = 4
    print "Before the sep:"
    print nums
    print
    
    for i in range(len(nums)):
        if (nums[i] % 2 == 0):
            variable = nums[i]
            nums.remove(nums[i])
            nums.append(variable)
            variable = 0
        print " iter: " + str(i) + str(nums) + "\n"
    print "After the sep:"
    print nums


def approach_two(nums):

    # while cond:
    #     do stuff
    print "input: " + str(nums) + "\n"

    for i in range(len(nums) - 1):
        if (nums[i] % 2 == 0) and (nums[i+1] % 2 == 1):
            nums[i], nums[i+1] = nums[i+1], nums[i]
            print " iter: " + str(i) + str(nums) + "\n"
        elif (nums[i] % 2 == 1) and (nums[i+1] % 2 == 0):
            continue
    print nums
            
